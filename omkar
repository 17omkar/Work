8import numpy as np
from pymongo import MongoClient
import random
import string
from faker import Faker

fake = Faker()

def read_file(file_path):
    with open(file_path) as file:
        lines = file.read().splitlines()
    return lines

def write_file(file_path, lines):
    with open(file_path, 'w') as file:
        file.write('\n'.join(lines))

def determine_type(sample):
    if sample[0] == '5':
        return "Non Monetary"
    elif sample[0] == '3':
        return "Monetary"
    else:
        return None

def mongodb_connection(url):
    client = MongoClient(url)
    db = client.get_database("mongo_lease001")
    return db

def generate_random_branchcode():
    branch = random.randint(501, 600)
    return branch

def generate_random_accountnumber():
    accnum = random.randint(1111111, 9999999)
    return accnum

loanaccount_type_options = [
    '0001', '0002', '0003', '0004', '0005', '0006', '0007'
]

def generate_random_loanaccounttype():
    return ''.join(random.choice(loanaccount_type_options))

def generate_random_shortname():
    Firstname = fake.first_name()
    Lastname = fake.last_name()
    Firstname = Firstname.upper()
    Lastname = Lastname.upper()
    shortname = f"{Firstname} {Lastname}"
    if len(shortname) > 15:
        shortname = shortname[:15]
    else:
        shortname = shortname.ljust(15)
    return shortname

def generate_random_postdate(month, day):
    year = "24"
    century = "2"
    postdate = f"{month:02d}{day:02d}{year}{century}"
    return postdate

def generate_random_effectivedate(month, day):
    year = "24"
    century = "2"
    effectivedate = f"{month:02d}{day:02d}{year}{century}"
    return effectivedate

def generate_random_legit_datechecker():
    month = int(fake.month())
    day1 = int(fake.day_of_month())
    day2 = day1 + random.randint(6, 7)
    return generate_random_postdate(month, day1) + generate_random_effectivedate(month, day2)


def generate_random_Trancode():
    trancode=random.randint(60,90)
    return trancode

Action_code_list = ['A', 'P', 'I', 'R']

def generate_random_Actioncode():
    return ''.join(random.choice(Action_code_list))

def generate_random_interest():
    beforedecimal = random.randint(0, 620830)
    afterdecimal = random.randint(0, 99)
    interest_amount = f"{beforedecimal}.{afterdecimal:02d}"
    a = str(interest_amount)
    i = a.replace('.', '')
    return float(interest_amount), i.zfill(9)


def generate_random_principal():
    beforedecimal = random.randint(0, 4279190)
    afterdecimal = random.randint(0, 99)
    principal_amount = f"{beforedecimal}.{afterdecimal:02d}"
    a = str(principal_amount)
    p = a.replace('.', '')
    return float(principal_amount), p.zfill(11)


def generate_random_misc():
    beforedecimal = random.randint(0, 100000)
    afterdecimal = random.randint(0, 99)
    misc_amount = f"{beforedecimal}.{afterdecimal:02d}"
    a = str(misc_amount)
    m = a.replace('.', '')
    return float(misc_amount), m.zfill(11)


Signs = ['+', '-']

def generate_random_transinterestsign():
    return random.choice(Signs)

def generate_random_transmiscsign():
    return random.choice(Signs)

def generate_random_trans_Signs():
    iis = ps = generate_random_transinterestsign()
    ms = generate_random_transmiscsign()
    return iis, ps, ms


def generate_random_total(ints,prs,mis,iv,pv,mv):
    a = 1 if ints == '+' else -1
    b = 1 if prs == '+' else -1
    c = 1 if mis == '+' else -1
    total = a * iv + b * pv + c * mv
    return total

def generate_random_transtotal_str(number):
    number_str = str(int(abs(number) * 100))
    return number_str.zfill(11)

def generate_random_transtotalsign(total):
    if total < 0:
        return '-'
    else:
        return '+'



def generate_opid():
    first_char = random.choice(string.ascii_uppercase)  # Choose the first character from the letters
    remaining_chars = ''.join(random.choices(string.ascii_uppercase + string.digits, k=7))  # Choose the remaining 7 characters from letters and digits
    opid = first_char + remaining_chars
    return opid

opid = generate_opid()

def generate_random_Opname():
    Firstname = fake.first_name()
    Lastname = fake.last_name()
    Firstname = Firstname.upper()
    Lastname = Lastname.upper()
    shortname = f"{Firstname} {Lastname}"
    if len(shortname) > 15:
        shortname = shortname[:15]
    else:
        shortname = shortname.ljust(15)
    return shortname


def generate_random_Batchnumber():
    batchnum=random.randint(601,700)
    return batchnum


def insert_data(uri, collection_name, data, num_lines):
    db = mongodb_connection(uri)
    collection = db.get_collection(collection_name)
    new_lines = []

    for _ in range(num_lines):
        line = random.choice(data)
        line = line.strip()
        data_type = determine_type(line)
        document = {
            "Type": data_type
        }

        if data_type == "Monetary":
            iv, istr = generate_random_interest()
            pv, pstr = generate_random_principal()
            mv, mstr = generate_random_misc()
            ints, prs, mis = generate_random_trans_Signs()
            total = generate_random_total(ints, prs, mis, iv, pv, mv)
            total_str = generate_random_transtotal_str(total)
            total_sign = generate_random_transtotalsign(total)
            branch_code = str(generate_random_branchcode())
            account_number = str(generate_random_accountnumber())
            loan_account_type = generate_random_loanaccounttype()
            short_name = generate_random_shortname()
            post_date, effective_date = generate_random_legit_datechecker()[:7], generate_random_legit_datechecker()[7:]
            tran_code = str(generate_random_Trancode())
            action_code = generate_random_Actioncode()
            trans_interest = istr
            trans_interest_sign=ints
            trans_principal = pstr
            trans_principal_sign=prs
            trans_misc = mstr
            trans_misc_sign=mis
            Op_id=opid
            op_name = generate_random_Opname()
            batch_number = str(generate_random_Batchnumber())
            trans_total = total_str
            trans_total_sign = total_sign

            new_line = (
                line[:4] +
                branch_code +
                account_number +
                loan_account_type +
                line[18:25] +
                short_name +
                post_date +
                effective_date +
                tran_code +
                action_code +
                trans_interest +
                trans_interest_sign +
                trans_principal +
                trans_principal_sign +
                trans_misc +
                trans_misc_sign+
                line[91:97]+
                Op_id +
                op_name +
                ' '+
                batch_number +
                total_str+
                total_sign
            )
            
            document.update({
                "Bank": new_line[1:4],
                "Branch": new_line[4:7],
                "AccountNumber": new_line[7:14],
                "LoanAccountType": new_line[14:18],
                "AccountType": new_line[18:19],
                "ClassCode": new_line[19:21],
                "Collcode": new_line[21:25],
                "ShortName": new_line[25:40],
                "PostDate": new_line[40:47],
                "EffectiveDate": new_line[47:54],
                "TranCode": new_line[54:56],
                "ActionCode": new_line[56:57],
                "TransInterest": new_line[57:66],
                "TransInterestsign": new_line[66:67],
                "TransPrincipal": new_line[67:78],
                "TransPrincipalsign": new_line[78:79],
                "TransMisc": new_line[79:90],
                "TransMiscsign": new_line[90:91],
                "Transdescription":new_line[91:95],
                "Op_id":new_line[97:105],
                "OpName": new_line[105:121],
                "BatchNumber": new_line[121:124],
                "TransTotal": new_line[124:135],
                "TotalSign": new_line[135:136]
            })

            collection.insert_one(document)
            new_lines.append(new_line)

    return new_lines

if __name__ == "__main__":
    file_path = "Sample_data.txt"
    uri = "mongodb://localhost:27017/"
    collection_name = "mydata"
    lines = read_file(file_path)
    num_lines_to_add = 10
    new_lines = insert_data(uri, collection_name, lines, num_lines_to_add)
    all_lines = lines + new_lines
    write_file(file_path, all_lines)







checker:
def extract_amounts(line):
    # Extracting the values and their signs from the line
    trans_interest = float(line[57:66]) / 100
    trans_interest_sign = line[66]

    trans_principal = float(line[67:78]) / 100
    trans_principal_sign = line[78]

    trans_misc = float(line[79:90]) / 100
    trans_misc_sign = line[90]

    total_str = line[124:135]
    total_sign = line[135]

    # Applying the signs to the extracted amounts
    if trans_interest_sign == '-':
        trans_interest = -trans_interest
    if trans_principal_sign == '-':
        trans_principal = -trans_principal
    if trans_misc_sign == '-':
        trans_misc = -trans_misc

    # Calculate the total
    total_computed = trans_interest + trans_principal + trans_misc

    # Compare with the given total
    given_total = float(total_str) / 100
    if total_sign == '-':
        given_total = -given_total

    return trans_interest, trans_principal, trans_misc, total_computed, given_total

# Given line
line = "3601595366868000028355411VALERIE HARRIS 0122242080924274I035515481-00149348882-00002688111+****  Q16D97X6TYLER WATSON    67700182176252-"

# Extract and verify amounts
trans_interest, trans_principal, trans_misc, total_computed, given_total = extract_amounts(line)

print(f"Interest: {trans_interest}")
print(f"Principal: {trans_principal}")
print(f"Misc: {trans_misc}")
print(f"Computed Total: {total_computed}")
print(f"Given Total: {given_total}")

# Check if they match
if round(total_computed, 2) == round(given_total, 2):
    print("The total matches.")
else:
    print("The total does not match.")



####
import random
from faker import Faker

fake = Faker()

# Ensure shortname is exactly 15 characters
def process_shortname(shortname):
    if len(shortname) > 15:
        shortname = shortname[:15]
    else:
        shortname = shortname.ljust(15)
    return shortname

# Generate a random post date
def generate_random_postdate(month, day):
    year = "24"
    century = "2"
    postdate = f"{month:02d}{day:02d}{year}{century}"
    return postdate

# Generate a random effective date
def generate_random_effectivedate(month, day):
    year = "24"
    century = "2"
    effectivedate = f"{month:02d}{day:02d}{year}{century}"
    return effectivedate

# Generate random dates with a 7-day difference
def generate_random_legit_datechecker():
    month = int(fake.month())
    day1 = int(fake.day_of_month())
    day2 = day1 + random.randint(0, 7)
    
    # Ensure day2 does not exceed the number of days in the month
    while day2 > 28:  # Simplified check to avoid complexity with different month lengths
        day1 = int(fake.day_of_month())
        day2 = day1 + random.randint(0, 7)

    postdate = generate_random_postdate(month, day1)
    effectivedate = generate_random_effectivedate(month, day2)
    
    return postdate, effectivedate

# Example usage
shortname = "ExampleShortNameThatIsTooLong"
processed_shortname = process_shortname(shortname)
print(f"Processed Shortname: {processed_shortname}")

postdate, effectivedate = generate_random_legit_datechecker()
print(f"Post Date: {postdate}, Effective Date: {effectivedate}")






from calendar import monthrange

def generate_random_legit_datechecker():
    while True:
        month = random.randint(1, 12)
        year = 2024  # Year to consider for leap year
        day1 = random.randint(1, 28)  # Simplified to avoid issues with month lengths
        day2 = day1 + random.randint(0, 7)
        
        # Handle month change if day2 exceeds the number of days in the month
        days_in_month = monthrange(year, month)[1]
        if day2 > days_in_month:
            month += 1
            if month > 12:
                month = 1  # Roll over to January if it exceeds December
            day2 -= days_in_month

        postdate = generate_random_postdate(month, day1)
        effectivedate = generate_random_effectivedate(month, day2)
        return postdate, effectivedate

# Example usage
postdate, effectivedate = generate_random_legit_datechecker()
print(f"Post Date: {postdate}, Effective Date: {effectivedate}")




date checker
from datetime import datetime

def calculate_date_difference(post_date_str, effective_date_str):
    # Convert date strings to datetime objects
    post_date = datetime.strptime(post_date_str, '%m%d%Y')
    effective_date = datetime.strptime(effective_date_str, '%m%d%Y')

    # Calculate the date difference
    date_diff = effective_date - post_date

    # Return the date difference in days
    return date_diff.days

def date_difference_checker(lines):
    date_diff_list = []

    for line in lines:
        post_date_str = line[40:47]
        effective_date_str = line[47:54]

        date_diff = calculate_date_difference(post_date_str, effective_date_str)
        date_diff_list.append(date_diff)

    return date_diff_list

# Example usage
file_path = "Sample_data.txt"
lines = read_file(file_path)
date_diff_list = date_difference_checker(lines)

# Print the date differences
for i, date_diff in enumerate(date_diff_list, 1):
    print(f"Line {i}: Date Difference: {date_diff} days")





from datetime import datetime

def parse_dates_from_lines(lines):
    post_dates = []
    effective_dates = []
    for line in lines:
        postdate = line[40:47]  # Assuming post date starts at index 40 and has a length of 7
        effectivedate = line[47:54]  # Assuming effective date starts at index 47 and has a length of 7
        post_dates.append(postdate)
        effective_dates.append(effectivedate)
    return post_dates, effective_dates

def calculate_date_difference(post_dates, effective_dates):
    date_diffs = []
    for postdate, effectivedate in zip(post_dates, effective_dates):
        postdate_obj = datetime.strptime(postdate, "%m%d%y")  # Updated format string
        effectivedate_obj = datetime.strptime(effectivedate, "%m%d%y")  # Updated format string
        diff = effectivedate_obj - postdate_obj
        date_diffs.append(diff.days)
    return date_diffs

def date_difference_checker(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()
    post_dates, effective_dates = parse_dates_from_lines(lines)
    date_diffs = calculate_date_difference(post_dates, effective_dates)
    return date_diffs

# Example usage
file_path = "sample_data.txt"
differences = date_difference_checker(file_path)
print("Date Differences:", differences)


